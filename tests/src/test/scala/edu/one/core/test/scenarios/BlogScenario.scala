package edu.one.core.test.scenarios

import io.gatling.core.Predef._
import io.gatling.http.Predef._
import bootstrap._

object BlogScenario {

	val scn = exec(http("Login teacher")
      .post("""/auth/login""")
      .param("""email""", """${teacherLogin}""")
      .param("""password""", """blipblop""")
      .check(status.is(302)))
//    .exec(http("Upload blog thumbnail")
//      .post("/workspace/document?application=blog-newblog&protected=true")
//    .bodyPart(FileBodyPart("file", "tests/src/test/resources/images/blog.jpg", "image/jpeg"))
//     // .body(RawFileBody("tests/src/test/resources/images/blog.jpg"))
////      .bodyPart(RawFileBodyPart("file", "tests/src/test/resources/images/blog.jpg", "image/jpeg"))
////      .upload("file", "tests/src/test/resources/images/blog.jpg", "image/jpeg")
//      .check(status.is(201), jsonPath("$.status").is("ok"),
//        jsonPath("$._id").find.saveAs("blogImgId")))
  .exec(http("Create blog")
    .post("/blog")
    .param("title", "Mon premier blog")
    .param("description", "Le blog de la classe")
    .param("thumbnail", "/blog/public/img/blog.png") //"/workspace/document/${blogImgId}")
    .param("comment-type", "NONE")
    .param("publish-type", "RESTRAINT")
    .check(status.is(200), jsonPath("$._id").find.saveAs("blogId")))
  .exec(http("Create post")
    .post("/blog/post/${blogId}")
    .param("title", "Le billet de l'enseignant")
    .param("content", "Lorem ipsum si amet dolor...")
    .check(status.is(200), jsonPath("$._id").find.saveAs("postId")))
  .exec(http("Create comment with comment-type: none")
    .post("/blog/comment/${blogId}/${postId}")
    .param("comment", "Le commentaire qui n'est pas autorisé")
    .check(status.is(400)))
  .exec(http("Update blog")
    .put("/blog/${blogId}")
    .bodyPart(StringBodyPart("comment-type", "RESTRAINT"))
    .check(status.is(200)))
  .exec(http("Create comment with comment-type: restraint")
    .post("/blog/comment/${blogId}/${postId}")
    .param("comment", "Le commentaire qui est autorisé avec modération")
    .check(status.is(200)))
  .exec(http("List blog")
    .get("/blog/list/all")
    .check(status.is(200), jsonPath("$").findAll.transform(_.map(_.size > 0)).is(true),
      jsonPath("$[0]._id").find.is("${blogId}")))
  .exec(http("List push before publish")
    .get("/blog/post/list/all/${blogId}")
    .check(status.is(200), jsonPath("$").findAll.transform(_.map(_.size).orElse(Some(0))).is(0)))
  .exec(http("Publish post")
    .put("/blog/post/publish/${blogId}/${postId}")
    .check(status.is(200)))
  .exec(http("List post after publish")
    .get("/blog/post/list/all/${blogId}")
    .check(status.is(200), jsonPath("$").findAll.transform(_.map(_.size)).is(1)))
  .exec(http("Get share view")
    .get("/blog/share/${blogId}")
    .check(status.is(200)))
  .exec(http("Share blog with students (read, contrib, comment)")
    .post("/blog/share/${blogId}")
    .param("resourceId", "${blogId}")
    .multiValuedParam("shareGroups", List("edu-one-core-blog-controllers-PostController|comments,edu-one-core-blog-controllers-PostController|get,edu-one-core-blog-controllers-BlogController|get,edu-one-core-blog-controllers-PostController|list_${profilGroupIds(1)}", "edu-one-core-blog-controllers-PostController|unpublish,edu-one-core-blog-controllers-PostController|create,edu-one-core-blog-controllers-PostController|delete,edu-one-core-blog-controllers-PostController|update,edu-one-core-blog-controllers-PostController|submit_${profilGroupIds(1)}", "edu-one-core-blog-controllers-PostController|deleteComment,edu-one-core-blog-controllers-PostController|comment_${profilGroupIds(1)}"))
    .check(status.is(200)))

}
